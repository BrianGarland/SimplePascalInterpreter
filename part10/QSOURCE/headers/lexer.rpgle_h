**FREE
/IF NOT DEFINED(lexer_h)
/DEFINE lexer_h


DCL-C INTEGER       'INTEGER';
DCL-C REAL          'REAL';
DCL-C INTEGER_CONST 'INTEGER_CONST';
DCL-C REAL_CONST    'REAL_CONST';
DCL-C PLUS          'PLUS';
DCL-C MINUS         'MINUS';
DCL-C MUL           'MUL';
DCL-C INTEGER_DIV   'INTEGER_DIV';
DCL-C FLOAT_DIV     'FLOAT_DIV';
DCL-C LPAREN        '(';
DCL-C RPAREN        ')';
DCL-C ID            'ID';
DCL-C ASSIGN        'ASSIGN';
DCL-C BEGIN         'BEGIN';
DCL-C END           'END';
DCL-C SEMI          'SEMI';
DCL-C DOT           'DOT';
DCL-C PROGRAM       'PROGRAM';
DCL-C VAR           'VAR';
DCL-C COLON         'COLON';
DCL-C COMMA         'COMMA';
DCL-C EOF           'EOF';

DCL-C CHILDREN      'CHILDREN';
DCL-C NOOP          'NOOP';
DCL-C BLOCK         'BLOCK';
DCL-C TYPE          'TYPE';
DCL-C VARDECL       'VARDECL';
DCL-C NONE          x'FF';


DCL-DS RESERVED_KEYWORDS QUALIFIED DIM(7);
    id    LIKE(ShortString);
    value LIKE(ShortString);
END-DS;



//--------------------------------------
// Token
//--------------------------------------

DCL-DS Token_t QUALIFIED TEMPLATE;
    type   LIKE(ShortString) INZ('');
    value  LIKE(ShortString) INZ('');
END-DS;

DCL-PR Token_Init LIKEDS(Token_t);
    type LIKE(ShortString) VALUE;
    value LIKE(ShortString) VALUE;
END-PR;

DCL-PR Token_Error LIKE(ShortString);
    self LIKEDS(Token_t);
END-PR;



//--------------------------------------
// Lexer
//--------------------------------------

DCL-DS Lexer_t QUALIFIED TEMPLATE;
    text          LIKE(LongString) INZ('');
    pos           UNS(10) INZ(1);
    current_char  CHAR(1) INZ('');
END-DS;

DCL-PR Lexer_Init LIKEDS(Lexer_t);
    text LIKE(LongString);
END-PR;

DCL-PR Lexer_Error;
    self LIKEDS(Lexer_t);
END-PR;

DCL-PR Lexer_Advance;
    self LIKEDS(Lexer_t);
END-PR;

DCL-PR Lexer_Peek LIKE(ShortString);
    Self LIKEDS(Lexer_t);
END-PR;

DCL-PR Lexer_Skip_Whitespace;
    self LIKEDS(Lexer_t);
END-PR;

DCL-PR Lexer_Integer LIKE(ShortString);
    self LIKEDS(Lexer_t);
END-PR;

DCL-PR Lexer_ID LIKEDS(token_t);
    self LIKEDS(Lexer_t);
END-PR;

DCL-PR Lexer_Get_Next_Token LIKEDS(token_t);
    self LIKEDS(Lexer_t);
END-PR;

/ENDIF
